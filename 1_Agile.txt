

Agile - attempt to make sw develop process effective

learn from the previous iteration


values- individuals and interacations over processes and tools, working software over comprehensive documentation, customer collaboration, responding to change over following a plan

agile roles : stakeholder, product owner, team member, team lead, architecture owner(architecture creatuion for solution design), agile mentor(implements agile projects and shares experience, feedback , advice to project teams)

agile planning:
1)release planning - finish set of task
2)iteration planning - work to be done during the iteration
3) daily planning - meetings to plan each day

CHOOSING AN AGILE APPROACH: 

1)SCRUM(Successful teaming) : scrum is the most popular approach to agile software development. Scrum provides a simple framework for teams to work together collaboratively developing small increments of the application 
or product in short sprints (Scrum calls iterations sprints). Each 
successive sprint builds upon the previous one. This approach 
encourages a focus on only what is needed and enables teams 
to demonstrate success continuously and obtain feedback early. 
Scrum teams are composed of the following primary roles:

2)XP - Extreme programming
putting custoemrs first. achieves high customer satisfaction

3)Lean programming:

4)Kanban: improving on existing systems

AGILE MODELING:

with agile model driven development(Amdd) we can do ehough high level modeling at the beginning of a project to understand the scope and potential architecture of the system. 

agile modeling practices: 

  1)active stakeholder participation
  2)architecture envisioning
  3)document continuously
  4)document late
  5)executable speicifications
  6)iteration modeling
  7)just barely good enough artifacts

Agile team:
  1)product owner- represents the end customer
  2)scrum master - facilitates team meetings, ensure team remains on the track
  3)delivery team - people in charge of execution or that are also part of the porjects implementation(developers,testers, analysts)

Tools:

 1)Burn down chart - chart shows remaining work to be done(x-time sprints y-story points)
 2)Kanban/agile board - visual representation of a team doing in a sprint(left to right)(todo->inporgress->done)

Rituals:

1)sprint planning
2)daily standups 
3)sprint review
4)retrospectives(meetins done after sprints to review, revise and adjust)



----------------------------------------------------------------------

Agile - is a methodology that delivers software or value incrementally from the start of the project instead of all at once at the end. it is iterative and time boxed. it workds by bradking down projects into little bits of user functionality called user stories , prioritizing them and continuously delivering them in short 2week cycles called sprints(iterations).

working software is the main focus rather than documentation

----------------------------------------------------------------------

Agile Introduction
Agile is a methodology. It's a way of thinking. It is NOT a model in and of itself.

Agile was invented because the scope of software development was changing. Waterfall methods aren't bad, they're just slow, and not built for a lot of modern problems.

This is largely due to the complexity of modern systems which make them hard to plan 100%. This means at some point, a change will be required, and production will stop until all the documents are updated.

With agile however, we can move a little bit quicker. We are constantly looking for and adjusting to change.

Agile Manifesto
The agile manifesto is a set of guiding principles for agile development. They are: 

Individuals and interactions over process and tools.

Working software over comprehensive documentation.

Customer collaboration over contract negotiation.

Responding to change over following a plan.

With this set of rules, all agile models are created. Note, in here we aren't throwing out processes and tools, and we aren't going without a plan. We are simply just creating priorities within the development process. We want to make the piece of software that is needed. To do this, we need to keep communication channels open and collaborate with all involved.

Through this manifesto, models were created that fit these rules.

Agile Models
Scrum - Scrum is focused on sprints. Sprints are these 1-4 week production cycles. We take the software, come up with a goal of where we want it to be, and then build it to there.

Once we finish a sprint, we then go back to the stakeholders, show them the software, take suggestions, and move on to the next sprint.

All of this allows us to stay flexible. We are communicating with the stakeholders almost every 2 weeks with this model. This means we are constantly able to take those suggestions and change the direction of development.

Just because scrum is Agile doesn't mean it's not structured. With scrum we typically have many assigned roles.

Product Owner - In charge of what needs to be done in what manner. Takes inputs from all the stakeholders and helps come up with a prioritization list of what needs to be accomplished next.

Scrum Master - Holds team liable to scrum ideas. Facilitates meetings and conflict resolution.

Team - The team building the software. Might be composed of engineers, designers, architects, etc.

More Info: https://zenkit.com/en/blog/scrum-101-an-introduction-to-scrum-project-management/

Kanban - The kanban system is one of optimization. With kanban, we are trying to analyze the flow of production and figure out the slowdowns.

To do this, we usually use some sort of visual flowchart. We break the project up into tasks and fill up the chart. We are then able to see if any part of production has a slowdown. Maybe for example, our review process is slowing us down, or maybe it's planning.

With kanban, we are trying to make small adjustments into the right direction. We want to work with the existing process, not replace it.




Lean Startup - Lean startup is a way of testing out the market before spending on development. Here we create a MVP (Minimum Viable Product) to see if there is interest in the product we are developing.

Production costs a lot of money. It would be really bad if we spent $500,000 on a project, just to figure out that nobody is actually interested in that product.

An example of this would be to build a website that sells a certain product. Get it working to the point where people can place that item into a cart. Then when they go to purchase, have it give them a friendly message stating that this feature will be coming soon. We then track how many people are actually interested in buying products off our website.

If we have a lot of interest, then we are good to go ahead with production. If we don't have as much interest, then maybe we need to rethink our design.


SCRUM Overview Notes
SCRUM Overview
There are many different parts to SCRUM. To operate a good SCRUM framework, each part needs to be incorporated successfully.

3 SCRUM Roles: 

Product Owner

Scrum Master

Development Team

5 SCRUM Events: 

Sprint Planning

Daily Standup

The Sprint

Sprint Review

Sprint Retrospective

3 SCRUM Artifacts

Sprint Backlog

Product Increment

Product Backlog

5 SCRUM Values

Focus - Focus on the work of the sprint and the goals of the team.

Openness - Open and Transparent about all work and challenges.

Respect -  Respect each other to be capable at their jobs and responsibilities.

Commitment - Personally commit to achieving the goals of the SCRUM Team.

Courage - Courage to do the right thing and work on tough problems.

3 SCRUM Pillars

Transparency - Giving visibility of the entire process to those responsible for the outcome.

Inspection - Timely checks and inspections of the progress toward a sprint goal used to detect undesirable changes.

Adaption - Adjusting a process as soon as possible to minimize further deviation or issues.

Product Owner
The product owner is the expert on the product. He/she knows how the product operates, the direction it's stakeholders want it to go, and has a roadmap for getting there. Constant communications at all levels is important for this job.

Responsibilities: 

Managing a healthy product backlog.

Answers product related questions.

Communicates with stakeholders and the Dev Team consistently.

Manages budget and release dates.

Ensures the value of the team.

Provides feedback at various levels of development.

Respects commitments.

Scrum Master
The Scrum Master is there to keep the team going and as productive as possible. They are there to be the multiplier. If you have a team which can produce 100 units of work. The Scrum Master is there to try to make that x2 or 200 units. They will do everything in their power to remove blocks, increase morale, and make sure everyone is upholding the tenets of SCRUM to keep things productive.

Responsibilities: 

Facilitates daily standup.

Removes blocks for the team.

Keeps the team happy, with high morale.

Ensures all SCRUM values are being upheld.

Sets up all SCRUM Meetings.

Encourages collaboration between everyone.

Is the mediator, coach, mentor, and guide.

Development Team
The development team is there to create the product. They have the skills and expertise to make whatever needs to happen happen. These members should be as cross-functional as possible. This means everyone ideally should be able to accomplish every task. In programming this means full-stack engineers are best for this role.

Responsibilities: 

Collaborate with Product Owner to create and refine user stories.

Writing code, and tests to fit expectations.

Conducting research, design, and prototyping.

Helping make decisions based on architectures, design, etc.

Helping to develop and maintain current iterations.








